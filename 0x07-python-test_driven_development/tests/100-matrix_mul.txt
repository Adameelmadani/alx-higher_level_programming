>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

>>> matrix_mul("Hi", 84)
Traceback (most recent call last):
	...
TypeError: m_a must be a list

>>> matrix_mul([], "hello")
Traceback (most recent call last):
	...
TypeError: m_b must be a list

>>> matrix_mul([38], [3])
Traceback (most recent call last):
	...
TypeError: m_a must be a list of lists

>>> matrix_mul([[9]], [383])
Traceback (most recent call last):
	...
TypeError: m_b must be a list of lists

>>> matrix_mul([], [])
Traceback (most recent call last):
	...
ValueError: m_a can't be empty

>>> matrix_mul([[]], [])
Traceback (most recent call last):
	...
ValueError: m_a can't be empty

>>> matrix_mul([[3]], [])
Traceback (most recent call last):
	...
ValueError: m_b can't be empty

>>> matrix_mul([[1, 2], [3, "shiiiit"]], [[1, 2], [3, 4]])
Traceback (most recent call last):
	...
TypeError: m_a should contain only integers or floats

>>> matrix_mul([[1, 2], [3, 4]], [["Hollllla", 0], [3, -3]])
Traceback (most recent call last):
	...
TypeError: m_b should contain only integers or floats

>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4], [3, 0]])
Traceback (most recent call last):
	...
ValueError: m_a and m_b can't be multiplied

>>> matrix_mul([[1, 2, 3], [30, 30, 0], [33, -44, 38]], [[1, 2], [3, 4]])
Traceback (most recent call last):
	...
ValueError: m_a and m_b can't be multiplied

>>> matrix_mul([[3], [3, 8]], [[3]])
Traceback (most recent call last):
	...
TypeError: each row of m_a must be of the same size
